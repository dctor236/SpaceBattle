declare module "module_cameracg" {
    export class CSConfig {
        static readonly EVENT_TEMP_STORAGE_SAVE = "EventCSTempStorageSave";
        static readonly EVENT_TEMP_STORAGE_LOAD = "EventCSTempStorageLoad";
        static readonly EVENT_TEMP_STORAGE_LOAD_RESPONSE = "EventCSTempStorageLoadResponse";
        /** 临时数据存储Key */
        static readonly TEMP_STORAGE_KEY = "CSTempStorage";
        static readonly TEMP_STORAGE_KEY_SET_CAMERA_SYNC = "CSTempStorageSetCameraSync";
        static readonly TEMP_STORAGE_KEY_SET_ = "CSTempStorage";
        /** 按键映射 */
        static readonly KEY_ACTION_MAP: Map<KeyAction, mw.Keys>;
    }
}

declare module "module_cameracg" {
    /**
     * 运行时动态配置
     */
    export class CSSettings {
        /** 摄像机同步功能 */
        static isCameraSync: boolean;
        /** 插值器 */
        static isLinear: boolean;
    }
}

declare module "module_cameracg" {
    /**
     * 按键状态管理器
     * 映射模块内操作到具体按键
     * 实现无延迟监听按键按下状态
     */
    export const enum KeyAction {
        CameraForward = 0,
        CameraBack = 1,
        CameraLeft = 2,
        CameraRight = 3,
        CameraUp = 4,
        CameraDown = 5,
        KeyFrame = 6,
        DelKeyFrame = 7,
        ChangeView = 8,
        Back2LastFrame = 9,
        PlayKeyFrames = 10,
        PlayKeyFramesFromStart = 11,
        StopKeyFrames = 12,
        SaveAnim = 13,
        ClearAnim = 14,
        HoldUINode = 15,
        OpenEditor = 16,
        CloseEditor = 17
    }
    /**
     * 按键状态管理器
     */
    export class KeyActionManager {
        private static _instance;
        static get instance(): KeyActionManager;
        isReady: boolean;
        private _actionStates;
        private _btnStates;
        init(): void;
        /**
         * 检测按键是否被按下，无延迟（需要在update中调用，留意性能开销）
         * @param action 项目内按键操作枚举
         * @returns 是否被按下
         */
        isPress(action: KeyAction | mw.Button): boolean;
        /**
         * 为指定按钮添加状态监听
         * @param btn 需要监听状态的按钮
         */
        add(btn: mw.Button): void;
    }
}

declare module "module_cameracg" {
    export class GoPool {
        /**
         * @description 获取对象池全局实例
         * @effect 调用端生效
         * @returns 对象池全局实例
         */
        static getInstance(): GoPool;
        /**
         * @description 销毁对象池全局实例
         * @effect 调用端生效
         */
        destroy(): void;
        private defTransform;
        /**
         * @description 生成一个对象
         * @precautions 注意如果是资源库中的资源，需要把原始资源预加载
         * @effect 调用端生效
         * @param guid usage: 资源GUID
         * @param type usage: 资源类型 default: 资源库中的资源
         * @returns 生成的对象
         */
        spawn<T extends GameObject>(guid: string, type?: GameObjPoolSourceType): T;
        /**
         * @description 异步生成一个对象
         * @precautions 注意需要把原始资源预加载
         * @effect 调用端生效
         * @param guid usage: 资源GUID
         * @param type usage: 资源类型 default: 资源库中的资源
         * @returns 生成的对象
         */
        asyncSpawn<T extends GameObject>(guid: string, type?: GameObjPoolSourceType): Promise<T>;
        /**
         * @description 归还一个对象
         * @effect 调用端生效
         * @param obj usage: 要归还的对象
         */
        despawn(obj: GameObject): void;
        /**
         * @description 清除对象池中该GUID对应的所有对象
         * @effect 调用端生效
         * @param guid usage: 资源GUID
         * @param type usage: 资源类型 default: 资源库中的资源
         */
        clear(guid: string, type?: GameObjPoolSourceType): void;
        /**
         * @description 清除对象池里的所有对象
         * @effect 调用端生效
         */
        clearAll(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 摄像机锚点
     * 摄像机的控制对象（将摄像机附着到该物体上使用）
     */
    export class CameraAnchor {
        camera: Camera;
        speed: number;
        private _anchorObj;
        private _moveLoc;
        private _moveDirection;
        private readonly VECTOR_ZERO;
        constructor();
        update(dt: number): void;
        getAnchorGameObject(): mw.GameObject;
        getLocation(): mw.Vector;
        getRotation(): mw.Rotation;
        setLocation(location: mw.Vector): void;
        setRotation(rotation: mw.Rotation): void;
        setFOV(fov: number): void;
        resetOverrideRotation(): void;
        destroy(): void;
    }
}

declare module "module_cameracg" {
    export class Log {
        static info(...text: any[]): void;
        static warn(...text: any[]): void;
        static err(...text: any[]): void;
    }
}

declare module "module_cameracg" {
    /**
     * 单个关键帧信息
     */
    export class KeyFrameInfo {
        private _time;
        private _location;
        private _rotation;
        private _fov;
        /**
         * 反序列化本对象（注意：反序列化会引起错误，请在外部捕获）
         * @param jsonStr 源文本
         * @returns 返回序列化后的对象
         */
        static deserialize(jsonStr: string): KeyFrameInfo;
        constructor(time: number, location: mw.Vector, rotation: mw.Rotation, fov: number);
        get time(): number;
        set time(newTime: number);
        get location(): mw.Vector;
        set location(newLocation: mw.Vector);
        get rotation(): mw.Rotation;
        set rotation(newRotation: mw.Rotation);
        get fov(): number;
        set fov(newFOV: number);
    }
    export enum KeyFrameInfoType {
        Time = 0,
        LocationX = 1,
        LocationY = 2,
        LocationZ = 3,
        RotationX = 4,
        RotationY = 5,
        RotationZ = 6,
        FOV = 7
    }
}

declare module "module_cameracg" {
    /**
     * 关键帧动画类
     */
    export class KeyFrame {
        private _frameInfos;
        /**
         * 反序列化本对象（注意：反序列化会引起错误，请在外部捕获）
         * @param animJsonStr 源文本
         * @returns 返回序列化后的对象
         */
        static deserialize(animJsonStr: string): KeyFrame;
        constructor();
        push(keyFrameInfo: KeyFrameInfo, isDeserialize?: boolean): boolean;
        del(index: number): void;
        get(index: number): KeyFrameInfo;
        getEnd(): KeyFrameInfo;
        getLength(): number;
        forEach(callbackfn: (value: KeyFrameInfo, index: number, array: KeyFrameInfo[]) => void): void;
        /**
         * 对动画帧以时间进行排序
         */
        private sort;
        /**
         * 查找指定关键帧索引
         */
        indexOf(info: KeyFrameInfo): number;
        /**
         * 清空所有关键帧信息
         */
        clear(): void;
        /**
         * 将另一对象拷贝到本地
         */
        copy(keyFrame: KeyFrame): void;
        modifyTime(index: number, time: number): number;
        modifyLoc(index: number, loc: mw.Vector): void;
        modifyRot(index: number, rot: mw.Rotation): void;
        modifyFOV(index: number, fov: number): void;
        /**
         * 获取两关键帧之间距离
         * @param index1 在该动画中的索引
         * @param index2 在该动画中的索引
         */
        getLocationDifference(index1: number, index2: number): number;
        /**
         * 获取从获取上一帧到该帧的时间
         * @param index 当前帧下标（为空则是动画总时间）
         * @returns 时间
         */
        getFrameTime(index: number): number;
    }
}

declare module "module_cameracg" {
    export class CSTimeTextUI_Generate extends mw.UIScript {
        mTextTime: mw.TextBlock;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 计时条时间文本
     */
    export class UITimeText extends CSTimeTextUI_Generate {
        setState(pos: mw.Vector2, second: number): void;
        setTime(second: number): void;
        show(): void;
        hide(): void;
    }
}

declare module "module_cameracg" {
    export class CSTimePointUI_Generate extends mw.UIScript {
        mImgLine: mw.Image;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 计时条时间刻度
     */
    export class UITimePoint extends CSTimePointUI_Generate {
        private _defSize;
        protected onStart(): void;
        setState(pos: mw.Vector2, state: UITimePointState): void;
        show(): void;
        hide(): void;
    }
    export enum UITimePointState {
        Default = 0,
        Long = 1
    }
}

declare module "module_cameracg" {
    export class UIPool<T extends mw.UIScript> {
        protected _uiClass: new () => T;
        nodes: T[];
        protected size: mw.Vector2;
        constructor(_uiClass: new () => T);
        /**
         * 销毁池中所有对象
         */
        destroy(): void;
        /**
         * 请求一个UI对象
         * @returns 生成的对象
         */
        spawn(): T;
        /**
         * 归还一个对象
         */
        despawn(node: T): void;
        /**
         * 清除对象池中所有对象
         */
        clear(): void;
    }
    export class GridContainer<T extends mw.UIScript> extends UIPool<T> {
        private _canvas;
        protected _uiClass: new () => T;
        constructor(_canvas: mw.Canvas, _uiClass: new () => T);
        /**
         * 添加节点
         * @return 节点
         */
        addNode(): T;
        /**
         * 移除单个节点
         */
        removeNode(node: T): void;
        /**
         * 移除所有节点
         */
        removeAllNode(): void;
    }
    export class GridSelectContainer<T extends mw.UIScript & GridSelectContainerItem> extends UIPool<T> {
        private _canvas;
        protected _uiClass: new () => T;
        constructor(_canvas: mw.Canvas, _uiClass: new () => T);
        /**
         * 添加节点
         * @return 节点
         */
        addNode(): T;
        /**
         * 更新节点选中态
         * @param node
         */
        selectNode(node: T): void;
        /**
         * 移除单个节点
         */
        removeNode(node: T): void;
        /**
         * 移除所有节点
         */
        removeAllNode(): void;
    }
    export interface GridSelectContainerItem {
        onSelect: Action;
        isSelected: boolean;
        setSelected(isTrue: boolean): any;
    }
}

declare module "module_cameracg" {
    export class CSKeyFrameUI_Generate extends mw.UIScript {
        mImgSelect: mw.Image;
        mBtn: mw.Button;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 计时条关键帧
     */
    export class UIKeyFrame extends CSKeyFrameUI_Generate implements GridSelectContainerItem {
        onSelect: Action;
        isSelected: boolean;
        /** 保有当前在动画中的位置索引 */
        index: number;
        protected onAwake(): void;
        setState(pos: mw.Vector2, index: number): void;
        setSelected(isTrue: boolean): void;
        show(): void;
        hide(): void;
    }
}

declare module "module_cameracg" {
    export class UIUtils {
        /**
         * 无限制移动UI中心点到鼠标位置随鼠标
         * @param node 需要移动的UI
         */
        static moveFree(node: mw.Widget): void;
        /**
         * 限制父布局位置与X轴计算UI中心点到鼠标位置随鼠标
         * @param node 需要移动的UI
         * @return 移动后位置在父布局比（0~1）
         */
        static moveXInParent(node: mw.Widget): number;
        /**
         * 屏幕坐标转换为相对坐标（实验性）
         * @param node 转换节点
         * @param viewport 窗口坐标
         * @returns 转换后坐标
         */
        static viewport2LocalUpperLeft(node: mw.Widget, viewport: mw.Vector2): mw.Vector2;
    }
}

declare module "module_cameracg" {
    export class CSDialogLoad_Generate extends mw.UIScript {
        mBtnClose: mw.Button;
        mBtnLoad: mw.Button;
        mInput: mw.InputBox;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 导入时使用的弹出对话框
     */
    export class UICSDialogLoad extends CSDialogLoad_Generate {
        private _defHintStr;
        protected onAwake(): void;
        show(): void;
        hide(): void;
    }
}

declare module "module_cameracg" {
    export class CSEditorUI_Generate extends mw.UIScript {
        mBtnPlay: mw.Button;
        mBtnRecord: mw.Button;
        mBtnClear: mw.Button;
        mBtnSetting: mw.Button;
        mCanvasBtns: mw.Canvas;
        mBtnSpline: mw.Button;
        textSpline: mw.TextBlock;
        mBtnCameraSync: mw.Button;
        textCameraSync: mw.TextBlock;
        mBtnResetFOV: mw.Button;
        mBtnLoad: mw.Button;
        mBtnSave: mw.Button;
        mCanvasSetting: mw.Canvas;
        mCanvasTimePoint: mw.Canvas;
        mBtnBar: mw.Button;
        mBtnCurrentTime: mw.Button;
        mCanvasKeyFrame: mw.Canvas;
        mBtnAddTime: mw.Button;
        mBtnSubTime: mw.Button;
        mCanvasTimeLine: mw.Canvas;
        mInputLocX: mw.InputBox;
        mInputLocY: mw.InputBox;
        mInputLocZ: mw.InputBox;
        mInputRotP: mw.InputBox;
        mInputRotY: mw.InputBox;
        mInputRotR: mw.InputBox;
        mInputFOV: mw.InputBox;
        mBtnDelKeyFrame: mw.Button;
        mCanvasFramesEdit: mw.Canvas;
        mCanvasActionBar: mw.Canvas;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 编辑器主UI
     */
    export class UICSEditor extends CSEditorUI_Generate {
        private _totalTime;
        private _currentTime;
        get currentTime(): number;
        private _uiDialogLoad;
        private _moveNode;
        private _moveKeyFramesUIObject;
        selectKeyFramesIndex: number;
        private _locCache;
        private _rotCache;
        private _keyFramesNodeMoveTime;
        private _keyFramesUIPool;
        private _timePointUIPool;
        private _timTextUIPool;
        protected onStart(): void;
        protected onUpdate(dt: number): void;
        show(): void;
        hide(): void;
        private initUI;
        /**
         * 将按键进行监听，鼠标进入时为选中
         * @param btn 要监听的按钮
         * @param moveUI 需要移动的UI
         */
        private addHoverListener;
        /**
         * 更新时间轴绘制
         */
        private updateTimeLine;
        /**
         * 更新时间光标到指定时间处
         * @param time 指定时间
         */
        updateCurrentTime(time: number): void;
        /**
         * 使用关键帧动画更新帧节点显示
         * @param anim 关键帧动画
         */
        updateKeyFrameNode(anim: KeyFrame): void;
        /**
         * 处理关键帧编辑时的值应用
         * @param type
         * @param text
         * @returns
         */
        private handleKeyFrameChanged;
        /**
         * 选中指定索引的帧
         * @param index
         */
        selectKeyFrames(index: number, isInternal?: boolean): void;
        /**
         * 取消帧选中
         */
        unSelectKeyFrames(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 代理摄像机
     * 非摄像机同步模式下使用的代替显示对象
     */
    export class CameraProxy {
        isShow: boolean;
        private _anchorObj;
        constructor();
        getGameObject(): mw.GameObject;
        getLocation(): mw.Vector;
        setLocation(location: mw.Vector): void;
        setRotation(rotation: mw.Rotation): void;
        show(): void;
        hide(): void;
        destroy(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 关键帧动画播放器（编辑器使用，动画有状态）
     */
    export class CSEditedPlayer {
        private static _instance;
        static get instance(): CSEditedPlayer;
        private _uiEdit;
        /** 摄像机锚点（真实相机） */
        private _cameraAnchor;
        /** 代理相机 */
        private _proxyCamera;
        private _currentAnim;
        private _currentPlayIndex;
        private _currentKeyFrameTime;
        private _currentPlayResidueTime;
        private _currentPlayProgress;
        private handleComplete;
        private _isCompleteReductionCameraSetting;
        private _isPlaying;
        private _isCyclePlay;
        /** 插值时临时变量 */
        private _cameraAnchorMoveLoc;
        private _cameraAnchorMoveRot;
        private _cameraAnchorFov;
        private _endSetRotationTime;
        init(cameraAnchor: CameraAnchor, proxyCamera: CameraProxy): void;
        setCurrentAnim(anim: KeyFrame): void;
        /**
         * 设置当前播放时间 以计算姿态
         * @param currentTime 当前播放总时间
         * @returns
         */
        setCurrentPlayTotalTime(currentTime: number): void;
        /**
         * 从当前状态进行播放
         */
        play(): void;
        /**
         * 从头播放动画
         */
        playFromStart(): void;
        /**
         * 停止播放
         */
        stop(): void;
        /**
         * 切换播放与暂停
         */
        switchPlayStop(): void;
        /** 计算姿态 */
        calculationState(): void;
        private setNextFrameInfo;
        private hasNextFrameInfo;
        update(dt: number): void;
    }
}

declare module "module_cameracg" {
    export class CSDialog_Generate extends mw.UIScript {
        mBtnClose: mw.Button;
        mBtnYes: mw.Button;
        mBtnNo: mw.Button;
        mTextContent: mw.TextBlock;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 通用确认对话框
     */
    export class UICSDialog extends CSDialog_Generate {
        private _handleYes;
        private _handleNo;
        protected onStart(): void;
        show(text: string, onYes?: () => void, onNo?: () => void): void;
        hide(): void;
    }
}

declare module "module_cameracg" {
    export class CSDialogSave_Generate extends mw.UIScript {
        mBtnClose: mw.Button;
        mInput: mw.InputBox;
        /**
        * onStart 之前触发一次
        */
        protected onAwake(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 导入时使用的弹出对话框
     */
    export class UICSDialogSave extends CSDialogSave_Generate {
        protected onAwake(): void;
        show(jsonStr: string): void;
        hide(): void;
    }
}

declare module "module_cameracg" {
    /**
     * 编辑器主控制类
     */
    export class CSEditor {
        private static _instance;
        static get instance(): CSEditor;
        isEnablePathRender: boolean;
        private _ui;
        private _currentAnim;
        private _currentPathRenders;
        private _currentSelectPathRender;
        private _cameraAnchor;
        private _proxyCamera;
        private _isRecordCameraCycle;
        private _cameraCycle;
        private _lastCameraRotZ;
        private _cameraCycleDifference;
        private _storageLoadEvent;
        init(cameraAnchor: CameraAnchor, proxyCamera: CameraProxy): void;
        destroy(): void;
        update(dt: number): void;
        private initKeyboardKeys;
        private updatePathRender;
        /**
         * 时间轴增减变动合法性检测
         */
        checkUpdateTimeline(totalTime: number): boolean;
        updateTimeline(): void;
        recordKeyframe(): void;
        delKeyframe(index: number): void;
        clearCurrentAnim(): void;
        getKeyFrames(index: number): KeyFrameInfo;
        /**
         * 修改指定关键帧时间
         * @param index 需要修改的关键帧序号
         * @param time 修改后的时间
         */
        modifyKeyFramesTime(index: number, time: number): number;
        modifyKeyFramesLoc(index: number, loc: mw.Vector): void;
        modifyKeyFramesRot(index: number, rot: mw.Rotation): void;
        modifyKeyFramesFOV(index: number, fov: number): void;
        switchCameraSync(): void;
        /**
         * 通过Json字符串载入动画
         * @param animJsonStr 动画Json字符串
         * @returns 是否成功
         */
        loadAnim(animJsonStr: string): boolean;
        saveCurrentAnim(): void;
        resetCameraFOV(): void;
    }
}

declare module "module_cameracg" {
    export class MyQuaternion {
        w: number;
        x: number;
        y: number;
        z: number;
        /** 模长 */
        get length(): number;
        /** 共轭 */
        get conjugated(): MyQuaternion;
        /** 四元数的逆（共轭/模长^2）*/
        get inverted(): MyQuaternion;
        constructor(w?: number, x?: number, y?: number, z?: number);
        /**
         * 通过欧拉角设置四元数值
         */
        setEulerAngles(euler: mw.Vector): void;
        private euler2quat;
        /**
         * 四元数乘向量
         * @param v
         * @param q
         * @param out 接收值，没有则会创建
         * @returns 相乘结果向量
         */
        static multiplyVector(v: mw.Vector, q: MyQuaternion, out?: mw.Vector): mw.Vector;
        /**
         * 四元数叉乘
         * @param q1
         * @param q2
         * @param out 接收值，没有则会创建
         */
        static multiply(q1: MyQuaternion, q2: MyQuaternion, out?: MyQuaternion): MyQuaternion;
        toString(): string;
    }
}

declare module "module_cameracg" {
    /**
     * 关键帧动画播放器（完整播放，动画无状态，外部使用）
     */
    export class CSPlayer {
        private static _instance;
        static get instance(): CSPlayer;
        private _cameraAnchor;
        private _currentAnim;
        private _currentPlayIndex;
        private _currentKeyFrameTime;
        private _currentPlayResidueTime;
        private _currentPlayProgress;
        private handleComplete;
        private _isCompleteReductionCameraSetting;
        private readonly VECTOR_ZERO;
        /** 当前帧动画是否播放完成 */
        private _isPlayComplete;
        private _cameraAnchorMoveLoc;
        private _cameraAnchorMoveRot;
        private _cameraAnchorFov;
        private _offsetLoc;
        private _offsetRot;
        /** 应用到摄像机时的偏移量 */
        private _offsetMQua;
        init(cameraAnchor: CameraAnchor): void;
        /**
         * 带偏移值的完整播放动画
         * @param offsetLoc
         * @param offsetRot
         * @param anim
         * @param isReductionCamera
         * @param handleComplete
         */
        playOnOffset(offsetLoc: mw.Vector, offsetRot: mw.Rotation, anim: KeyFrame, isReductionCamera: boolean, handleComplete?: () => void): void;
        /**
         * 完整播放动画
         * @param anim
         * @param isReductionCamera
         * @param handleComplete
         */
        play(anim: KeyFrame, isReductionCamera: boolean, handleComplete?: () => void): void;
        stop(): void;
        private setNextFrameInfo;
        private hasNextFrameInfo;
        update(dt: number): void;
    }
}

declare module "module_cameracg" {
    /**
     * 需要的预加载资源
     */
    export const Assets: {
        MESH_BLOCK: string;
        MESH_CONES: string;
        MESH_BALL: string;
        MATERIAL_TRANSPARENT: string;
    };
    /**
     * 对外主控类
     */
    export class CameraCG {
        private static _instance;
        static get instance(): CameraCG;
        isReady: boolean;
        initializing: boolean;
        isFreeCamera: boolean;
        private _isFirstFreeCamera;
        private _cameraAnchor;
        private _cameraProxy;
        private _character;
        originCamera: Camera;
        private _storageSaveEvent;
        private _storageLoadEvent;
        constructor();
        init(): Promise<boolean>;
        destroy(): void;
        update(dt: number): void;
        /**
         * 启用编辑器
         */
        openEditor(): Promise<void>;
        /**
         * 关闭编辑器
         */
        closeEditor(): Promise<void>;
        /**
         * 播放动画
         * @param jsonStr 动画Json文本
         * @param handleComplete 完成回调
         * @param isReduction 播放完成是否恢复摄像机
         */
        play(jsonStr: string, handleComplete?: () => void, isReduction?: boolean): Promise<void>;
        /**
         * 将游戏对象位置作为播放偏移点进行动画播放
         * @param obj 作为偏移点的对象
         * @param jsonStr 动画Json文本
         * @param handleComplete 完成回调
         * @param isReduction 播放完成是否恢复摄像机
         */
        playOnGameObject(obj: mw.GameObject, jsonStr: string, handleComplete?: () => void, isReduction?: boolean): Promise<void>;
        /**
         * 带偏移点进行播放
         * @param offsetLoc 坐标偏移
         * @param offsetRot 旋转偏移
         * @param jsonStr 动画Json文本
         * @param handleComplete 完成回调
         * @param isReduction 播放完成是否恢复摄像机
         */
        playOnOffset(offsetLoc: mw.Vector, offsetRot: mw.Rotation, jsonStr: string, handleComplete?: () => void, isReduction?: boolean): Promise<void>;
        /**
         * 停止播放当前动画
         */
        stop(): Promise<void>;
        /**
         * 进入自由视角（但暂未提供触屏控制方式）
         */
        enterFreeCamera(): Promise<void>;
        /**
         * 退出自由视角，还原摄像机设置
         */
        exitFreeCamera(): Promise<void>;
    }
}

declare module "module_cameracg" {
    /**
     * 插值器
     */
    export abstract class Interpolator {
    }
}

declare module "module_cameracg" {
    type CubicSplineSegment = {
        a: number;
        b: number;
        c: number;
        d: number;
    };
    /**
     * 三次样条插值器 Vector2
     * 需线性扫描X轴作为t值
     */
    export class CubicInterpolator2 extends Interpolator {
        protected points: Vector2[];
        protected segments: CubicSplineSegment[];
        protected h: number[];
        interpolate(t: number): number;
        /** 计算每一段路径的参数组 */
        reCompute(points?: Vector2[]): CubicInterpolator2;
        protected findIndex(x: number): number;
    }
}

declare module "module_cameracg" {
    /**
     * 三次样条插值器 Vector3
     */
    export class CubicInterpolator extends Interpolator {
        protected points: Vector[];
        protected time: number[];
        protected xPoints: Vector2[];
        protected yPoints: Vector2[];
        protected zPoints: Vector2[];
        protected cubicInterpolator2x: CubicInterpolator2;
        protected cubicInterpolator2y: CubicInterpolator2;
        protected cubicInterpolator2z: CubicInterpolator2;
        interpolate(t: number, outer?: Vector): Vector;
        reCompute(points?: Vector[], time?: number[]): CubicInterpolator;
        protected findIndex(t: number): number;
    }
}

declare module "module_cameracg" {
    /**
     * 线性插值器
     */
    export class LinearInterpolator extends Interpolator {
        private _pointsA;
        private _pointsB;
        interpolateValue(a: number, b: number, t: number): number;
        interpolate(t: number, outer?: Vector): Vector;
        reCompute(a: Vector, b: Vector): LinearInterpolator;
    }
}

declare module "module_cameracg" {
    export type CameraDataType = {
        localTransform: Transform;
        fov: number;
        positionMode: CameraPositionMode;
        rotationMode: CameraRotationMode;
        positionLagEnabled: boolean;
        rotationLagEnabled: boolean;
        upAngleLimit: number;
        downAngleLimit: number;
        fixedElevation: number;
    };
    export type SpringArmDataType = {
        localTransform: Transform;
        worldTransform: Transform;
        length: number;
        collisionEnabled: boolean;
        useControllerRotation: boolean;
    };
}
