'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*
 * @Author: zhaolei
 * @Date: 2022-05-05 09:57:23
 * @LastEditors: zhaolei
 * @Description: file content
 */
class DropdownItem extends mw.UIScript {
    list;
    data;
}
class DropdownList {
    _root;
    _itemCls;
    space;
    /**
     * 不显示的缓存道具
     */
    _cache;
    /**
     * 显示的道具
     */
    _items;
    _isDropdown;
    onSelect = new Action1();
    constructor(_root, _itemCls, space = 0.5) {
        this._root = _root;
        this._itemCls = _itemCls;
        this.space = space;
        this._cache = [];
        this._items = [];
    }
    /**
  * 添加展开按钮事件
  */
    toggle() {
        this._isDropdown = !this._isDropdown;
        this._invalidateLayout();
    }
    /**
     * 添加展开按钮事件
     */
    expand() {
        this._isDropdown = true;
        this._invalidateLayout();
    }
    /**
     * 添加展开按钮事件
     */
    unExpand() {
        this._isDropdown = false;
        this._invalidateLayout();
    }
    /**
     * 添加一个选项
     * @param node
     * @param index 索引
     */
    addItem(data, index = -1) {
        let itemUI = this._cache.length > 0 ? this._cache.shift() : UIService.create(this._itemCls);
        if (!itemUI.list) {
            itemUI.list = this;
            itemUI.button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
            itemUI.button.onClicked.add(() => {
                this.onSelect.call(itemUI.button.text);
                this.unExpand();
            });
            this._root.cmdPanel.addChild(itemUI.uiObject);
        }
        itemUI.uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        itemUI.button.text = data;
        if (index >= 0) {
            this._items.splice(index, 0, itemUI);
        }
        else {
            this._items.push(itemUI);
        }
        this._root.cmdPanel.size = new mw.Vector2(270, this._items.length * (itemUI.uiObject.size.y + this.space));
        this._invalidateLayout();
    }
    /**
     * 删除一个选项
     * @param node
     */
    removeItem(node) {
        const index = this._items.indexOf(node);
        if (index >= 0) {
            node.visible = false;
            this._cache.push(...this._items.splice(index, 1));
            this._invalidateLayout();
        }
    }
    clear() {
        for (const item of this._items) {
            if (!this._cache.includes(item)) {
                this._cache.push(item);
            }
            item.uiObject.visibility = mw.SlateVisibility.Collapsed;
        }
        this._items.length = 0;
        this._invalidateLayout();
    }
    /**
     * 删除一个指定索引
     * @param index
     */
    removeItemAt(index) {
        const node = this.getItem(index);
        if (node) {
            this.removeItem(node);
        }
    }
    /**
     * 获取一个选项,超出范围则返回空
     * @param index
     */
    getItem(index) {
        if (index >= 0 && index < this._items.length)
            return this._items[index];
        return null;
    }
    get size() {
        return this._items.length;
    }
    /**
     * 重新对齐面板
     */
    _invalidateLayout() {
        if (this._isDropdown) {
            let offset = 0;
            this._root.cmdPanel.position = mw.Vector2.zero;
            this._root.dropList.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            for (let i = 0; i < this._items.length; i++) {
                this._items[i].uiObject.position = new mw.Vector2(0, offset);
                offset += this._items[i].uiObject.size.y + this.space;
            }
        }
        else {
            this._root.dropList.visibility = mw.SlateVisibility.Collapsed;
        }
    }
}

/**
 * @Author       : lei.zhao
 * @Date         : 2023-03-19 13:31:37
 * @LastEditors  : lei.zhao
 * @LastEditTime : 2023-03-19 13:31:37
 * @FilePath     : \commonmodule_gm\JavaScripts\module\gmModule\GM.ts
 * @Description  : 修改描述
 */
exports.GM = void 0;
(function (GM) {
    function start(uiClass) {
        if (SystemUtil.isClient()) {
            new uiClass().show();
        }
    }
    GM.start = start;
})(exports.GM || (exports.GM = {}));

/*
 * @Author: zhaolei
 * @Date: 2022-05-05 09:50:48
 * @LastEditors: zhaolei
 * @Description: file content
 */
class GMService {
    static _instance;
    static get instance() {
        if (!GMService._instance) {
            GMService._instance = new GMService();
        }
        return GMService._instance;
    }
    /**
     * 初始化UI
     */
    createUI(dropDownList) {
        GMConfig.forEach(cmd => {
            dropDownList.addItem(cmd);
        });
    }
    /**
     * 初始化配置
     */
    constructor() {
        if (SystemUtil.isServer()) {
            Event.addClientListener("GM_CALL", (player, gmIndex, param) => {
                GMConfig[gmIndex].serverCmd(player, param);
            });
        }
    }
    /**
     * 调用命令
     * @param data
     */
    cmd(data, param) {
        if (data.clientCmd) {
            data.clientCmd(mw.Player.localPlayer, param);
        }
        Event.dispatchToLocal("GM_RUN", data.label);
        const index = GMConfig.indexOf(data);
        if (index >= 0 && data.serverCmd) {
            Event.dispatchToServer("GM_CALL", index, param);
        }
    }
}

/**
 * @Author       : lei.zhao
 * @Date         : 2022-12-19 18:33:40
 * @LastEditors  : lei.zhao
 * @LastEditTime : 2023-04-10 15:50:21
 * @FilePath     : \commonmodule_gm\JavaScripts\module\gmModule\GMConfig.ts
 * @Description  : 修改描述
 */
const GMConfig = [];
/**
 * 添加GM命令
 * @param label 名称
 * @param cmdClient 客户端命令
 * @param cmdServer 服务端命令
 * @param shortKey 快捷键
 */
function AddGMCommand(label, cmdClient, cmdServer, group, shortKey) {
    if (shortKey != null) {
        label = label + "(" + shortKey + ")";
    }
    const data = { label: label, group: group, clientCmd: cmdClient, serverCmd: cmdServer, shortKey: shortKey };
    if (mw.SystemUtil.isServer()) {
        GMService.instance;
    }
    else {
        if (shortKey != null) {
            InputUtil.onKeyDown(shortKey, () => {
                GMService.instance.cmd(data, exports.GM.getParam ? exports.GM.getParam() : "");
            });
        }
    }
    GMConfig.push(data);
}

/**
 * @Author       : lei.zhao
 * @Date         : 2022-12-19 18:33:40
 * @LastEditors  : lei.zhao
 * @LastEditTime : 2023-04-10 16:35:51
 * @FilePath     : \commonmodule_gm\JavaScripts\module\gmModule\GMBasePanel.ts
 * @Description  : 修改描述
 */
//主面板
class GMBasePanel {
    dropDownList;
    isGroup = false;
    groupText = "分组";
    cmdText = "命令";
    _view;
    constructor(_viewCls, _itemCls) {
        exports.GM.getParam = () => {
            return this._view.argText.text;
        };
        this._view = UIService.create(_viewCls);
        this._view.groupButton.onClicked.add(() => {
            this.dropDownList.clear();
            this.dropDownList.addItem("分组");
            const groupList = [];
            GMConfig.forEach(cmd => {
                if (cmd.group && !groupList.includes(cmd.group)) {
                    groupList.push(cmd.group);
                    this.dropDownList.addItem(cmd.group);
                }
            });
            this.dropDownList.toggle();
            this.isGroup = true;
        });
        this._view.cmdButton.onClicked.add(() => {
            this.dropDownList.clear();
            if (this.groupText == "分组") {
                GMConfig.forEach(cmd => {
                    this.dropDownList.addItem(cmd.label);
                });
            }
            else {
                GMConfig.forEach(cmd => {
                    if (cmd.group == this.groupText) {
                        this.dropDownList.addItem(cmd.label);
                    }
                });
            }
            this.dropDownList.toggle();
            this.isGroup = false;
        });
        this._view.okButton.onClicked.add(() => {
            const cmd = GMConfig.find(i => i.label == this.cmdText);
            cmd && GMService.instance.cmd(cmd, this._view.argText.text);
        });
        this.dropDownList = new DropdownList(this._view, _itemCls, 1);
        this.dropDownList.onSelect.add(text => {
            this.isGroup ? (this.groupText = text, this._view.groupButton.text = text) : (this.cmdText = text, this._view.cmdButton.text = text);
        });
        Event.addLocalListener("GM_RUN", (label) => {
            this._view.cmdButton.text = label;
        });
        GMService.instance.createUI(this.dropDownList);
    }
    show() {
        UIService.showUI(this._view);
    }
}

exports.AddGMCommand = AddGMCommand;
exports.DropdownItem = DropdownItem;
exports.DropdownList = DropdownList;
exports.GMBasePanel = GMBasePanel;
exports.GMConfig = GMConfig;
exports.GMService = GMService;
//# sourceMappingURL=index.js.map
